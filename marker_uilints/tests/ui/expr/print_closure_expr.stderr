warning: print test
 --> $DIR/print_closure_expr.rs:4:5
  |
4 | /     let _print_simple_closure = || {
5 | |         1 + 1;
6 | |     };
  | |______^
  |
  = note: Closure(
              ClosureExpr {
                  data: CommonExprData {
                      _lifetime: PhantomData<&()>,
                      id: ExprId(..),
                      span: SpanId(..),
                  },
                  capture_kind: Default,
                  params: [],
                  return_ty: None,
                  body_id: BodyId(..),
              },
          )
  = note: `#[warn(marker::test_lint)]` on by default

warning: print test
 --> $DIR/print_closure_expr.rs:7:5
  |
7 |     let _print_no_type: fn(u32) -> () = |x| { /*...*/ };
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: Closure(
              ClosureExpr {
                  data: CommonExprData {
                      _lifetime: PhantomData<&()>,
                      id: ExprId(..),
                      span: SpanId(..),
                  },
                  capture_kind: Default,
                  params: [
                      ClosureParam {
                          span: SpanId(..),
                          pat: Ident(
                              IdentPat {
                                  data: CommonPatData {
                                      _lifetime: PhantomData<&()>,
                                      span: SpanId(..),
                                  },
                                  name: SymbolId(..),
                                  var: VarId(..),
                                  mutability: Unmut,
                                  is_ref: false,
                                  binding_pat: None,
                              },
                          ),
                          ty: None,
                      },
                  ],
                  return_ty: None,
                  body_id: BodyId(..),
              },
          )

warning: print test
 --> $DIR/print_closure_expr.rs:8:5
  |
8 |     let _print_with_args = |x: u32, y: u32| x + y;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: Closure(
              ClosureExpr {
                  data: CommonExprData {
                      _lifetime: PhantomData<&()>,
                      id: ExprId(..),
                      span: SpanId(..),
                  },
                  capture_kind: Default,
                  params: [
                      ClosureParam {
                          span: SpanId(..),
                          pat: Ident(
                              IdentPat {
                                  data: CommonPatData {
                                      _lifetime: PhantomData<&()>,
                                      span: SpanId(..),
                                  },
                                  name: SymbolId(..),
                                  var: VarId(..),
                                  mutability: Unmut,
                                  is_ref: false,
                                  binding_pat: None,
                              },
                          ),
                          ty: Some(
                              Num(
                                  SynNumTy {
                                      data: CommonSynTyData {
                                          _lifetime: PhantomData<&()>,
                                          span: SpanId(..),
                                      },
                                      numeric_kind: U32,
                                  },
                              ),
                          ),
                      },
                      ClosureParam {
                          span: SpanId(..),
                          pat: Ident(
                              IdentPat {
                                  data: CommonPatData {
                                      _lifetime: PhantomData<&()>,
                                      span: SpanId(..),
                                  },
                                  name: SymbolId(..),
                                  var: VarId(..),
                                  mutability: Unmut,
                                  is_ref: false,
                                  binding_pat: None,
                              },
                          ),
                          ty: Some(
                              Num(
                                  SynNumTy {
                                      data: CommonSynTyData {
                                          _lifetime: PhantomData<&()>,
                                          span: SpanId(..),
                                      },
                                      numeric_kind: U32,
                                  },
                              ),
                          ),
                      },
                  ],
                  return_ty: None,
                  body_id: BodyId(..),
              },
          )

warning: print test
 --> $DIR/print_closure_expr.rs:9:5
  |
9 |     let _print_move = move || a;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: Closure(
              ClosureExpr {
                  data: CommonExprData {
                      _lifetime: PhantomData<&()>,
                      id: ExprId(..),
                      span: SpanId(..),
                  },
                  capture_kind: Move,
                  params: [],
                  return_ty: None,
                  body_id: BodyId(..),
              },
          )

warning: print test
  --> $DIR/print_closure_expr.rs:10:5
   |
10 |     let _print_pattern_in_arg: fn((u32, u32, u32)) -> () = |(a, b, c)| { /*...*/ };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: Closure(
               ClosureExpr {
                   data: CommonExprData {
                       _lifetime: PhantomData<&()>,
                       id: ExprId(..),
                       span: SpanId(..),
                   },
                   capture_kind: Default,
                   params: [
                       ClosureParam {
                           span: SpanId(..),
                           pat: Tuple(
                               TuplePat {
                                   data: CommonPatData {
                                       _lifetime: PhantomData<&()>,
                                       span: SpanId(..),
                                   },
                                   elements: [
                                       Ident(
                                           IdentPat {
                                               data: CommonPatData {
                                                   _lifetime: PhantomData<&()>,
                                                   span: SpanId(..),
                                               },
                                               name: SymbolId(..),
                                               var: VarId(..),
                                               mutability: Unmut,
                                               is_ref: false,
                                               binding_pat: None,
                                           },
                                       ),
                                       Ident(
                                           IdentPat {
                                               data: CommonPatData {
                                                   _lifetime: PhantomData<&()>,
                                                   span: SpanId(..),
                                               },
                                               name: SymbolId(..),
                                               var: VarId(..),
                                               mutability: Unmut,
                                               is_ref: false,
                                               binding_pat: None,
                                           },
                                       ),
                                       Ident(
                                           IdentPat {
                                               data: CommonPatData {
                                                   _lifetime: PhantomData<&()>,
                                                   span: SpanId(..),
                                               },
                                               name: SymbolId(..),
                                               var: VarId(..),
                                               mutability: Unmut,
                                               is_ref: false,
                                               binding_pat: None,
                                           },
                                       ),
                                   ],
                               },
                           ),
                           ty: None,
                       },
                   ],
                   return_ty: None,
                   body_id: BodyId(..),
               },
           )

warning: print test
  --> $DIR/print_closure_expr.rs:12:5
   |
12 |     let _print_infer_ty: fn(u32) -> () = |x: _| { /*...*/ };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: Closure(
               ClosureExpr {
                   data: CommonExprData {
                       _lifetime: PhantomData<&()>,
                       id: ExprId(..),
                       span: SpanId(..),
                   },
                   capture_kind: Default,
                   params: [
                       ClosureParam {
                           span: SpanId(..),
                           pat: Ident(
                               IdentPat {
                                   data: CommonPatData {
                                       _lifetime: PhantomData<&()>,
                                       span: SpanId(..),
                                   },
                                   name: SymbolId(..),
                                   var: VarId(..),
                                   mutability: Unmut,
                                   is_ref: false,
                                   binding_pat: None,
                               },
                           ),
                           ty: Some(
                               Inferred(
                                   SynInferredTy {
                                       data: CommonSynTyData {
                                           _lifetime: PhantomData<&()>,
                                           span: SpanId(..),
                                       },
                                   },
                               ),
                           ),
                       },
                   ],
                   return_ty: None,
                   body_id: BodyId(..),
               },
           )

warning: 6 warnings emitted

